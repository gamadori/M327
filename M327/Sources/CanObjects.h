/*
 * CanObjects.h
 *
 *  Created on: Jan 3, 2016
 *      Author: gianluca
 */

#ifndef CANOBJECTS_H_
#define CANOBJECTS_H_

/* MODULE objdict */

#define SIZEOFW_BYTE	1

#define SIZEOFW_WORD	2

#define SIZEOFW_DWORD	4

enum TypeBoard
{
	AllBoards,
	BoardsIO,
	BoardsAxe
};
#define COMM_PROFILE_LAST 0x1018

/** This is the last defined entry for pdo-paramters (tx).
 * This means: this is the last entry for which memory
 * has been allocated. Adjust this value if you need more
 * or less entries.
 */
#define TRANSMIT_PDO_LAST 0x1803


/** This is the last defined entry for pdo-paramters (rx).
 * This means: this is the last entry for which memory
 * has been allocated. Adjust this value if you need more
 * or less entries.
 */
#define RECEIVE_PDO_LAST 0x1403


/**
 * This is the last defined entry for sdo-parameters (rx)
 * This means: this is the last entry for wich memory
 * has been allocated. Adjust this value if you need more
 * or less entries
 */
#define SERVER_SDO_LAST	0x1200

/**
 * This is the last defined entry for sdo-parameters (rx)
 * This means: this is the last entry for wich memory
 * has been allocated. Adjust this value if you need more
 * or less entries
 */
#define CLIENT_SDO_LAST	0x1280

/** This is the last PDO-Mapping parameter (tx) for which memory
 * has been allocated
 */
#define TRANSMIT_PDO_MAPPING_LAST 0x1A03

/** This is the last PDO-Mapping parameter (rx) for which memory
* has been allocated
*/
#define RECEIVE_PDO_MAPPING_LAST 0x1603


/** Each pdo can map up to 64 vars (8 vars per 8bit, and 8 * 1Byte = 64 possibilities
* "normally" i think you need a maximum of 8 time 1 Byte, so 8 mapping entries
* should be sufficient. note: for each PDO a PDO-mapping is mandatory!
*/
#define MAPPING_PARAMETER_COUNT 8

/** autogenerated value: indicates the count of defined PDOs
 */
#define MAX_COUNT_RX_PDO (RECEIVE_PDO_LAST - 0x13FF)

#define MAX_COUNT_TX_PDO (TRANSMIT_PDO_LAST - 0x17FF)

#define DeclareIndexTableEntry(entryname, obj) {(struct td_s_subIndex *)entryname, sizeof(entryname) / sizeof(entryname[0]), obj}
			
			
#define NMAX_QUEUE_ERROR	0xff		



	
/** This is the datatype for the communication parameter of PDOs defined
 * by the CANopen standard
 */
typedef struct // Index: 0x20
{
	/** number of supported entries */
	byte count;
	 
	
	/** COB-ID */
	dword cob_id;
	
	/** transmission type: only type 255 (0xFF) supported yet */
	byte type;
	
	/** inhibit time: not supported yet. */
	word inhibit_time;
	
	/** reserved (by CANopen standard) */
	byte reserved;
	
	/** event timer: not supported yet.*/
	word event_timer;
} td_pdo_communication_parameter;


	
/*	
 * Struct needed for the idendity of a CANopen device. Defined
 * by the CANopen standard
 */
typedef struct  // Index: 0x23
{
	/** number of supported entries */
	byte count;

	/** Vendor-ID (given by the CAN-CIA) */	
	dword vendor_id;

	/** Product code */
	dword product_code;

	/** Revision number */
	dword revision_number;

	/** Serial number of this device */
	dword serial_number;
} td_identity;


typedef struct // Index: 0x22
{
	// number of supported entries
	byte count;
	
	// COB-ID Client->Server
	dword cobIdClient;
	
	// COB-ID Server->Client
	dword cobIdServer;
	
	// node ID of SDO’s client resp. server
	byte nodeID;
}td_sdo_parameter;

/** adjust this value, if you need more or less PDO mapping entries. (up to 64 are possible)
 */
#define COUNT_OF_PDO_MAPPING_PARAMETER 4

/** Struct needed for setting up PDO mapping parameter. Defined by the
 * CANopen standard
 */
typedef struct td_s_pdo_mapping_parameter // Index: 0x21
{

	/** count of mapping entries */
	byte count;
	
	/** mapping entries itself.*/
	dword object[COUNT_OF_PDO_MAPPING_PARAMETER];
	
} td_pdo_mapping;

typedef struct
{
	byte count;
	
	dword objects[NMAX_QUEUE_ERROR];
}td_error_queue;


extern const td_indexTable CommunicationProfileArea[];

extern const td_indexTable transmitPDOParameter[];

extern const td_indexTable RxPDOMappingTable[];

extern const td_indexTable receivePDOParameter[];

extern const td_indexTable RxPDOMappingTable[];

extern const td_indexTable TxPDOMappingTable[];

extern const td_indexTable IO_MappingTable[];


extern td_pdo_communication_parameter RxPDO1;

extern td_pdo_communication_parameter TxPDO1;

extern byte errorRegister;

extern td_error_queue queueError;

extern short typeBoardRxPDO[];

extern short typeBoardTxPDO[]; 


#endif /* CANOBJECTS_H_ */
